pipeline {
    agent {
        label 'docker'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockeruser')
        registry = "gopal99489/backend-lms"
        registryCredential = 'dockeruser'
        dockerImage = ''
    }

    stages {
        stage('Pipeline Status') {
            steps {
                script {
                    slackSend(
                        channel: 'jenkins-updates',
                        color: '#FFFF00',
                        message: 'lms-Backend Pipeline has been Started',
                        tokenCredentialId: 'slackuser'
                    )
                }
            }
        }
        
        stage('Building the Docker Image') {
            steps {
                sh 'cd api && docker build -t gopal99489/backend-lms .'
            }
        }

        stage('Logging into DockerHub Account') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Pushing the Docker Image to DockerHub') {
            steps {
                sh 'docker push gopal99489/backend-lms'
            }
        }
stage('Sonarqube code-checking') {
            steps {
                sh 'docker container run --rm -e SONAR_HOST_URL="http://13.235.9.206:9000" -e SONAR_LOGIN="sqp_090ebc6d99a43e234a05eb39fb0f29d8e8440e0b" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms-backend'
            }
        }

        stage('Remove Old Docker Images') {
            steps {
                sh 'docker rmi -f gopal99489/backend-lms'
            }
        }

        stage('Creating Database Container') {
            steps {
                sh 'docker container rm --force lmsdb'
                sh 'docker run -d -p 5432:5432 --network lmsnetwork -e POSTGRES_PASSWORD=password --name lmsdb postgres'
            }
        }

        stage('Running the Docker Container') {
            steps {
                sh 'docker container rm --force backend'
                sh '''docker run -d -p 8080:8080 --network lmsnetwork -e DATABASE_URL=postgresql://postgres:password@lmsdb:5432/postgres --name backend -e PORT=8080 -e MODE=local gopal99489/backend-lms'''
            }
        }
    }

    post {
        success {
            script {
                slackSend(
                    channel: 'jenkins-updates',
                    color: 'good',
                    message: 'Congratulations! Back-end job succeeded. Thanks...Gopal',
                    tokenCredentialId: 'slackuser'
                )
                slackUploadFile(
                    channel: 'jenkins-updates',
                    credentialId: 'slackuser',
                    filePath: 'api/backend'
                )
                emailext (
                    body: '''Building lms application backend job succeeded. Check browser with your IP or domain name.

Thank you,
Gopal''',
                    recipientProviders: [buildUser()],
                    subject: 'Build Successful!! lms_backend',
                    to: 'gopal99489@gmail.com'
                )
            }
        }
        failure {
            script {
                slackSend(
                    channel: 'jenkins-updates',
                    color: 'danger',
                    message: 'Oops... Back-end job failed! Check the job configurations. Thanks...Gopal - Job failed',
                    tokenCredentialId: 'slackuser'
                )
                emailext (
                    body: '''Building lms application backend job failed. Check job configuration.

Thank you,
Gopal''',
                    recipientProviders: [buildUser()],
                    subject: 'Build failed!! lms_backend',
                    to: 'gopal99489@gmail.com'
                )
            }
        }
    }
}
