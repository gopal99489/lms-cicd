pipeline {
    agent {
        label 'docker'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockeruser')
        registry = "gopal99489/frontend-lms"
        registryCredential = 'dockerhub'
    }

    stages {
        stage('pipeline status') {
            steps {
                script {
                    slackSend channel: 'jenkins-updates',
                            color: '#1e1ec9',
                            message: 'lms-Frontend Pipeline has been Started',
                            tokenCredentialId: 'slackuser'
                }
            }
        }

        stage('Building the docker image') {
            steps {
                sh 'cd webapp && docker build -t gopal99489/frontend-lms .'
            }
        }

        stage('Logging into dockerhub account') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Pushing the docker image into dockerhub') {
            steps {
                sh 'docker push gopal99489/frontend-lms'
            }
        }

        stage('Sonarqube code-checking') {
            steps {
                sh 'docker container run --rm -e SONAR_HOST_URL="http://65.0.199.33:9000" -e SONAR_LOGIN="sqp_3bc75af54f53b39453898107140e4ddd761d6416" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms-frontend'
            }
        }

        stage('Remove old docker images') {
            steps {
                sh 'docker rmi -f gopal99489/frontend-lms'
            }
        }

        stage('Running the docker container') {
            steps {
                sh 'docker container rm --force fe'
                sh 'docker run -dt -p 8000:80 --name fe gopal99489/frontend-lms'
            }

            post {
                success {
                    script {
                        slackSend channel: 'jenkins-updates', color: 'good', message: 'hi..CONGRATULATIONS Front-end job success !!!  Front_end build succeeded Thanks...Gopal', tokenCredentialId: 'slackuser'
                        slackUploadFile channel: 'jenkins-updates', credentialId: 'slackuser', filePath: 'webapp/frontend'
                        emailext body: ''' building lms application frontend job got success check browser with your ip or domain name. 

ThankYou,
Gopal''', recipientProviders: [buildUser()], subject: 'Build Successful !! lms_frontend', to: 'gopal99489@gmail.com'
                    }
                }
                failure {
                    script {
                        slackSend channel: 'jenkins-updates', color: 'danger', message: 'Oops..FAILED Front-end job failed !!! check the front-end job configurations Thanks...Gopal - Job failed', tokenCredentialId: 'slackuser'
                        emailext body: '''building lms application frontend job got failed check job configuration.  

ThankYou,
Gopal''', recipientProviders: [buildUser()], subject: 'Build failed !! lms_frontend', to: 'gopal99489@gmail.com'
                    }
                }
            }
        }
    }
}
